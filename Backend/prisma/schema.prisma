// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ORANISER
}

model Users {
  id           String    @id @default(uuid())
  first_name   String
  last_name    String
  password     String
  email        String    @unique
  birthday     DateTime?
  phone        String?   @unique
  country_code String?
  updated_at   DateTime  @default(now()) @updatedAt

  role        Role         @default(USER)
  festivals   Festivals[]  @relation("OrganisedFestivals")
  tickets     Tickets[]
  userLineups UserLineup[]
}

model Festivals {
  id          String   @id @default(uuid())
  organiserId String
  organiser   Users    @relation("OrganisedFestivals", fields: [organiserId], references: [id])
  name        String   @unique
  longitude   Float
  latitude    Float
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  start_date  DateTime
  end_date    DateTime

  stages      Stages[]
  tickets     Tickets[]
  userLineups UserLineup[]
}

model Stages {
  id         String    @id @default(uuid())
  festivalId String
  festival   Festivals @relation(fields: [festivalId], references: [id])
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  performances ArtistPerformance[]
}

model ArtistPerformance {
  artistId   String
  artist     Artists  @relation(fields: [artistId], references: [id])
  stageId    String
  stage      Stages   @relation(fields: [stageId], references: [id])
  created_at DateTime @default(now())
  day        DateTime
  start_time DateTime
  end_time   DateTime

  @@id([artistId, stageId, day]) // Composite PK if performances are unique by artist/stage/day
}

model Artists {
  id         String   @id @default(uuid())
  name       String   @unique
  genre      String
  updated_at DateTime @updatedAt

  performances ArtistPerformance[]
  lineupItems  UserLineupItem[]
}

model UserLineup {
  id         String    @id @default(uuid())
  userId     String
  user       Users     @relation(fields: [userId], references: [id])
  festivalId String
  festival   Festivals @relation(fields: [festivalId], references: [id])

  items UserLineupItem[]
}

model UserLineupItem {
  userLineupId String
  lineup       UserLineup @relation(fields: [userLineupId], references: [id])
  artistsId    String
  artist       Artists    @relation(fields: [artistsId], references: [id])

  @@id([userLineupId, artistsId])
}

model Tickets {
  id         String    @id @default(uuid())
  userId     String
  user       Users     @relation(fields: [userId], references: [id])
  festivalId String
  festival   Festivals @relation(fields: [festivalId], references: [id])
}
